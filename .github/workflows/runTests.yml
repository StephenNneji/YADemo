name: Run Unit Tests

on:  
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-13]
    runs-on: ${{ matrix.platform }}
 
    steps:
    - name: Checkout Demo
      uses: actions/checkout@v4
    - name: Upload releases
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}
        retention-days: 1
        path: ${{ runner.os }}.zip 
    - name: Upload cppDeploy
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: cppDeploy
        retention-days: 1
        path: cppDeploy.zip
  deploy-nightly:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: write
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R
      - name: Remove old nightly
        run: |
          gh release list --repo ${{ github.repository }} --json tagName --jq '.[] | .tagName' | xargs -n 1 gh release delete nightly --cleanup-tag --yes --repo ${{ github.repository }}
          gh release create nightly Windows.zip Linux.zip macOS.zip --prerelease --title "Nightly Build" --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}
      # - name: Create nightly release
      #   id: create_prerelease
      #   uses: ncipollo/release-action@v1
      #   with:
      #     name: "Nightly Build"
      #     artifacts: "Windows.zip, Linux.zip, macOS.zip"
      #     tag: nightly
      #     prerelease: true
      #     allowUpdates: true
      #     removeArtifacts: true
      #     draft: false
      #     token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Publish nightly GitHub prerelease
      #   uses: eregon/publish-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     release_id: ${{ steps.create_prerelease.outputs.id }}
